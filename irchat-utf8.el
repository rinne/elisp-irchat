;;;  -*- emacs-lisp -*-
;;;
;;;  $Id: irchat-utf8.el,v 3.2 2009/07/13 20:29:32 tri Exp $
;;;
;;; see file irchat-copyright.el for change log and copyright info

;;;
;;; UTF-8 kludge implementation by tri@iki.fi.
;;;

(defun irchat-utf8-kludge-nth-char (str n)
  "Get Nth character from STR as integer or nil if not in range."
  (if (and (stringp str)
	   (>= n 0)
	   (> (length str) n))
      (+ 0 (elt str n))
    nil))

(defun irchat-utf8-kludge-decode (str)
  "Decode the first character from STR as utf-8 if possible and return
as (code . rest) pair containing the character code of the first
character and the rest of the string"
  (let ((b1 (irchat-utf8-kludge-nth-char str 0))
	(b2 (irchat-utf8-kludge-nth-char str 1))
	(b3 (irchat-utf8-kludge-nth-char str 2))
	(b4 (irchat-utf8-kludge-nth-char str 3)))
    (cond ((or (null b1)
	       (= b1 0))
	   ; This is empty string or string that contains NIL characters
	   ; and it simply means that caller is out of luck
	   nil)
	  ((< b1 128)
	   ; This is ASCII
	   (cons b1 (substring str 1)))
	  ((and (>= b1 192)
		(< b1 224)
		(not (null b2))
		(>= b2 128)
		(< b2 192))
	   ; This is 2 byte encoded UTF-8 character
	   (cons (+ (* 64 (- b1 192))
		    (- b2 128))
		 (substring str 2)))
	  ((and (>= b1 224)
		(< b1 240)
		(not (null b2))
		(>= b2 128)
		(< b2 192)
		(not (null b3))
		(>= b3 128)
		(< b3 192))
	   ; This is 3 byte encoded UTF-8 character
	   (cons (+ (* 64 64 (- b1 224))
		    (* 64 (- b2 128))
		    (- b3 128))
		 (substring str 3)))
	  ((and (>= b1 240)
		(< b1 248)
		(not (null b2))
		(>= b2 128)
		(< b2 192)
		(not (null b3))
		(>= b3 128)
		(< b3 192)
		(not (null b4))
		(>= b4 128)
		(< b4 192))
	   ; This is 4 byte encoded UTF-8 character
	   (cons (+ (* 64 64 64 (- b1 224))
		    (* 64 64 (- b2 128))
		    (* 64 (- b3 128))
		    (- b4 128))
		 (substring str 4)))
	  (t
	   ; This is NOT UTF-8 encoding at all and is returned as is
	   (cons b1 (substring str 1))))))

(defun irchat-utf8-kludge-visible-char (ch)
  "Convert a character code into a visible string."
  (let ((x))
    (cond ((< ch 128)
	   (char-to-string ch))
	  ((setq x (assq ch irchat-utf8-kludge-assoc-list))
	   (cdr x))
	  ((< ch 256)
	   (char-to-string ch))
	  (t
	   (format "[U+%04x]" ch)))))


(defun irchat-utf8-kludge-decode-string (str)
  "Decode STR as utf-8 opportunisticly."
  (let ((r "")
	(e nil))
    (while (setq e (irchat-utf8-kludge-decode str))
	(setq r (concat r (irchat-utf8-kludge-visible-char (car e))))
	(setq str (cdr e)))
    r))

(defconst irchat-utf8-kludge-assoc-list
  '(
    (160 . " ")
    (161 . "¡")
    (162 . "¢")
    (163 . "£")
    (164 . "¤")
    (165 . "¥")
    (166 . "¦")
    (167 . "§")
    (168 . "¨")
    (169 . "©")
    (170 . "ª")
    (171 . "«")
    (172 . "¬")
    (173 . "­")
    (174 . "®")
    (175 . "¯")
    (176 . "°")
    (177 . "±")
    (178 . "²")
    (179 . "³")
    (180 . "´")
    (181 . "µ")
    (182 . "¶")
    (183 . "·")
    (184 . "¸")
    (185 . "¹")
    (186 . "º")
    (187 . "»")
    (188 . "¼")
    (189 . "½")
    (190 . "¾")
    (191 . "¿")
    (192 . "À")
    (193 . "Á")
    (194 . "Â")
    (195 . "Ã")
    (196 . "Ä")
    (197 . "Å")
    (198 . "Æ")
    (199 . "Ç")
    (200 . "È")
    (201 . "É")
    (202 . "Ê")
    (203 . "Ë")
    (204 . "Ì")
    (205 . "Í")
    (206 . "Î")
    (207 . "Ï")
    (208 . "Ð")
    (209 . "Ñ")
    (210 . "Ò")
    (211 . "Ó")
    (212 . "Ô")
    (213 . "Õ")
    (214 . "Ö")
    (215 . "×")
    (216 . "Ø")
    (217 . "Ù")
    (218 . "Ú")
    (219 . "Û")
    (220 . "Ü")
    (221 . "Ý")
    (222 . "Þ")
    (223 . "ß")
    (224 . "à")
    (225 . "á")
    (226 . "â")
    (227 . "ã")
    (228 . "ä")
    (229 . "å")
    (230 . "æ")
    (231 . "ç")
    (232 . "è")
    (233 . "é")
    (234 . "ê")
    (235 . "ë")
    (236 . "ì")
    (237 . "í")
    (238 . "î")
    (239 . "ï")
    (240 . "ð")
    (241 . "ñ")
    (242 . "ò")
    (243 . "ó")
    (244 . "ô")
    (245 . "õ")
    (246 . "ö")
    (247 . "÷")
    (248 . "ø")
    (249 . "ù")
    (250 . "ú")
    (251 . "û")
    (252 . "ü")
    (253 . "ý")
    (254 . "þ")
    (255 . "ÿ")
    (960 . "[pi]")
    (8211 . "[endash]")
    (8212 . "[emdash]")
    (8220 . "[left double quote]")
    (8221 . "[right double quote]")
    (8216 . "[left quote]")
    (8217 . "[right quote]")
    (8364 . "[euro]")
    (8482 . "[trademark]")
    (8730 . "[square root]")
    (8776 . "[approx]")
    (8800 . "[not equal]")
    )
  "Partial UNICODE table.")

(eval-and-compile
  (provide 'irchat-utf8))
;;;
;;; eof
;;;
